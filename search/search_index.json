{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"practica2-4/","text":"Natividad M\u00e1rquez Baena Pr\u00e1ctica 2.4 \u2013 Balanceo de carga con proxy inverso en Nginx INTRODUCCI\u00d3N CONFIGURACIONES COMPROBACIONES INTRODUCCI\u00d3N En esta practica se va a configurar y utilizar Nginx como proxy inverso y balanceador de carga en un entorno de servidores web, aprovechando sus capacidades para distribuir la carga de trabajo y gestionar las solicitudes de los clientes. Los servidores proxy inversos y los balanceadores de carga son intermediarios entre clientes y servidores en una arquitectura cliente-servidor, con el objetivo de mejorar la eficiencia de la comunicaci\u00f3n. Un proxy inverso recibe solicitudes de clientes, las reenv\u00eda al servidor adecuado y devuelve la respuesta, gestionando la comunicaci\u00f3n y proporcionando una capa adicional de seguridad, y puede implementarse incluso con un solo servidor. Un balanceador de carga, en cambio, distribuye las solicitudes entrantes entre m\u00faltiples servidores para optimizar el rendimiento y evitar sobrecargas. Es especialmente \u00fatil cuando el volumen de tr\u00e1fico supera la capacidad de un solo servidor. Adem\u00e1s, aumenta la fiabilidad al redirigir las solicitudes cuando un servidor falla, mejorando as\u00ed la disponibilidad del sitio y la experiencia del usuario. Para la realizaci\u00f3n de esta practica se ha clonado previamente la m\u00e1quina virtual con el webserver, para obtener dos servidores que balanceen la carga. CONFIGURACIONES En el clon de la maquina, se cambia la configuraci\u00f3n del webserver a webserver 2. Para indicar que este ser\u00e1 el otro servidor web. Se modifica el server_name por webserver2. Tambi\u00e9n se modifica el header . Ya disponemos de los dos servidores web entre los que se van a repartir las peticiones al servidor, se procede a modificar el proxy inverso, para que realice este reparto de peticiones: En el archivo de configuraci\u00f3n del proxy se modifica la configuraci\u00f3n. Se a\u00f1ade un bloque llamado upstream , que son los bloques donde se repartir\u00e1n la carga, en el siguiente formato: De esta manera hemos indicado que se repartir\u00e1n entre el webserver1 y el webserver2. Para cada cambio en los archivos de configuraci\u00f3n, tanto de los servidores web como del proxy, se ha de restaurar nginx para aplicar los cambios: Tambi\u00e9n realizamos una comprobaci\u00f3n del archivo hosts de la m\u00e1quina anfitriona, para comprobar que la IP es correcta. COMPROBACIONES En este apartado se va a comprobar si la sobrecarga con multiples solicitudes al servidor, desencadena un balanceo al otro servidor web. Primeramente se comprueba el acceso a nuestro sitio web: La cabecera Host: webserver2 indica que la solicitud fue dirigida a webserver2 . Si sometemos al sitio web a una \"sobrecarga\" presionando F5 repetidamente, el balanceo provocar\u00eda un cambio de la recepci\u00f3n de las solicitudes, al otro servidor web. Como se observa en la imagen, marcado en verde, la cabecera ha cambiado a webserver1 . De esta manera hemos comprobado que el balanceo de la carga entre los dos servidores funciona correctamente.","title":"Practica2 4"},{"location":"practica2-4/#practica-24-balanceo-de-carga-con-proxy-inverso-en-nginx","text":"INTRODUCCI\u00d3N CONFIGURACIONES COMPROBACIONES","title":"Pr\u00e1ctica 2.4 \u2013 Balanceo de carga con proxy inverso en Nginx"},{"location":"practica2-4/#introduccion","text":"En esta practica se va a configurar y utilizar Nginx como proxy inverso y balanceador de carga en un entorno de servidores web, aprovechando sus capacidades para distribuir la carga de trabajo y gestionar las solicitudes de los clientes. Los servidores proxy inversos y los balanceadores de carga son intermediarios entre clientes y servidores en una arquitectura cliente-servidor, con el objetivo de mejorar la eficiencia de la comunicaci\u00f3n. Un proxy inverso recibe solicitudes de clientes, las reenv\u00eda al servidor adecuado y devuelve la respuesta, gestionando la comunicaci\u00f3n y proporcionando una capa adicional de seguridad, y puede implementarse incluso con un solo servidor. Un balanceador de carga, en cambio, distribuye las solicitudes entrantes entre m\u00faltiples servidores para optimizar el rendimiento y evitar sobrecargas. Es especialmente \u00fatil cuando el volumen de tr\u00e1fico supera la capacidad de un solo servidor. Adem\u00e1s, aumenta la fiabilidad al redirigir las solicitudes cuando un servidor falla, mejorando as\u00ed la disponibilidad del sitio y la experiencia del usuario. Para la realizaci\u00f3n de esta practica se ha clonado previamente la m\u00e1quina virtual con el webserver, para obtener dos servidores que balanceen la carga.","title":"INTRODUCCI\u00d3N"},{"location":"practica2-4/#configuraciones","text":"En el clon de la maquina, se cambia la configuraci\u00f3n del webserver a webserver 2. Para indicar que este ser\u00e1 el otro servidor web. Se modifica el server_name por webserver2. Tambi\u00e9n se modifica el header . Ya disponemos de los dos servidores web entre los que se van a repartir las peticiones al servidor, se procede a modificar el proxy inverso, para que realice este reparto de peticiones: En el archivo de configuraci\u00f3n del proxy se modifica la configuraci\u00f3n. Se a\u00f1ade un bloque llamado upstream , que son los bloques donde se repartir\u00e1n la carga, en el siguiente formato: De esta manera hemos indicado que se repartir\u00e1n entre el webserver1 y el webserver2. Para cada cambio en los archivos de configuraci\u00f3n, tanto de los servidores web como del proxy, se ha de restaurar nginx para aplicar los cambios: Tambi\u00e9n realizamos una comprobaci\u00f3n del archivo hosts de la m\u00e1quina anfitriona, para comprobar que la IP es correcta.","title":"CONFIGURACIONES"},{"location":"practica2-4/#comprobaciones","text":"En este apartado se va a comprobar si la sobrecarga con multiples solicitudes al servidor, desencadena un balanceo al otro servidor web. Primeramente se comprueba el acceso a nuestro sitio web: La cabecera Host: webserver2 indica que la solicitud fue dirigida a webserver2 . Si sometemos al sitio web a una \"sobrecarga\" presionando F5 repetidamente, el balanceo provocar\u00eda un cambio de la recepci\u00f3n de las solicitudes, al otro servidor web. Como se observa en la imagen, marcado en verde, la cabecera ha cambiado a webserver1 . De esta manera hemos comprobado que el balanceo de la carga entre los dos servidores funciona correctamente.","title":"COMPROBACIONES"}]}